<engine>
 <description>
  This example shows how to use the new ESP text sentiment window.

  Running Instructions:

  dfesp_xml_server -model file://model.xml -exit
 </description>
 <projects>
  <project name='project_01' pubsub='none' threads='4'>
   <description>Define the project, this is a container for one or more continuous queries.</description>
   <contqueries>
    <contquery name='contquery_01' trace='textSentimentWindow'>
     <description>
      Define a continuous query object. This is the first level container for windows. It also
      contains the window to window connectivity information. We want to see
      textSentimentWindow events as they are created by specifying that window in the trace
      attribute.
     </description>
     <windows>
      <window-source name='sourceWindow_01'>
       <description>
        Build the source window. We specify the window name, the schema
        for events, and the type of primary index, in this case a hash tree
       </description>
       <schema-string>ID*:int32,tstamp:date,msg:string</schema-string>
       <connectors>
        <connector class='fs'>
         <properties>
          <property name='type'>pub</property>
          <property name='fstype'>csv</property>
          <property name='fsname'>@EPSTESTDATA@/text_sentiment_data.csv</property>
          <property name='dateformat'>%Y-%m-%d %H:%M:%S</property>
         </properties>
        </connector>
       </connectors>
      </window-source>
      <window-textsentiment name='textSentimentWindow' sam-file='@HOME@/samFile/en-domain-indep.sam' text-field='msg' index='pi_EMPTY'>
       <description>
        Build the textSentiment window. We specify the window name, the type
        of primary index, the SAM file path, and the input string field
        or document to analyze.
        Note that this is an insert-only window, so you most likely want to
        use an empty index for this window and follow it with a copy window
        for defining data retention of the sentiment events.
        If you try to run this example you will need to have licensed SAS
        Text Analytics, whose install contains these SAM language files.
        You will need to change the samFile string above to point to your
        SAM file otherwise the text analytics sentiment engine
        will not be initialized.
       </description>
      </window-textsentiment>
      <window-copy name='copyWindow_01' index='pi_RBTREE'>
       <description>
        We are placing a copy window after the textSentiment window
        so that it can be used to hold the textSentiment events with
        an established retention policy. This is a design pattern 
        for insert-only windows.

        We set its retention policy to a sliding window of 5 minutes.
        This example only has 3 events being injected so the retention
        policy will not take effect, but if we published enough data
        into this model then it would start retaining older events out
        using retention deletes once they aged past 5 minutes.
       </description>
       <retention type='bytime_sliding'>5 minutes</retention>
      </window-copy>
     </windows>
     <edges>
      <description>
       Add the connectivity information to the continuous query. This
       means sourceWindow_01 ==> textSentimentWindow ==> copyWindow_01
      </description>
      <edge source='sourceWindow_01' target='textSentimentWindow'/>
      <edge source='textSentimentWindow' target='copyWindow_01'/>
     </edges>
    </contquery>
   </contqueries>
  </project>
 </projects>
</engine>

