<engine port='5555'>
 <description>
  This is a simple example that has one source window and one procedural
  window to show you how to use procedural window in XML modeling.


  engine element creates the single engine top level container which sets
  up DFESP fundamental services such as licensing, logging, pub/sub, ...
  This single engine instance wraps one or more projects, that wrap
  one or more continuous queries and different types of windows.
 </description>
 <projects>
  <project name='project' pubsub='auto' threads='1'>
   <description>
    This is to create a project. Project specifies a container
    that holds one or more continuous queries and are backed by a
    thread pool of user defined size. One can specify the pubsub
    port and type, number of threads for the project, index type
    and if using Tag Token data flow model.
   </description>
   <contqueries>
    <contquery name='contQuery' trace='proceduralWindow'>
     <description>
      This specifies the continuous query container that holds
      a collection of windows and enables one to specify the
      connectivity between windows. One can turn on tracing
      for a list of window and specifies the index type for
      windows in the query.

      This fully specifies the continuous query with window
      connectivity, which is a directed graph.
     </description>
     <windows>
      <window-source name='sourceWindow'>
       <description>
        This defines a source window. All event streams must
        enter continuous queries by being published or
        injected into a source window.
       </description>
       <schema>
        <fields>
         <field name='ID' type='int32' key='true'/>
         <field name='symbol' type='string'/>
         <field name='quantity' type='int32'/>
         <field name='price' type='double'/>
        </fields>
       </schema>
       <connectors>
        <connector class='fs' name='publisher'>
         <properties>
          <property name='type'>pub</property>
          <property name='fstype'>csv</property>
          <property name='fsname'>@ESPTESTDATA@/procedural_data.csv</property>
          <property name='transactional'>true</property>
          <property name='blocksize'>1</property>
         </properties>
        </connector>
       </connectors>
      </window-source>
      <window-procedural name='proceduralWindow'>
       <description>
        This is a procedural window with a derived context. The
        handler function for the procedural window is defined
        in src/function.cpp, as well as the derived context.
        See details in src/function.cpp.
       </description>
       <schema>
        <fields>
         <field name='ID' type='int32' key='true'/>
         <field name='insertCount' type='int32'/>
         <field name='updateCount' type='int32'/>
         <field name='deleteCount' type='int32'/>
        </fields>
       </schema>
       <cxx-plugin-context name='plugin' function='get_derived_context'/>
       <cxx-plugin source='sourceWindow' name='plugin' function='countOpcodes'/>
      </window-procedural>
     </windows>
     <edges>
      <edge source='sourceWindow' target='proceduralWindow'/>
     </edges>
    </contquery>
   </contqueries>
  </project>
 </projects>
</engine>

