<engine port='5555'>
 <description>
  This is a simple example that has one source window and one aggregate
  window. The aggregate window has four registered expressions to
  calculate the non-key fields. The key field is what is aggregated on.

  engine element creates the single engine top level container which sets up dfESP
  fundamental services such as licensing, logging, pub/sub, ...
  This single engine instance wraps one or more projects, that wrap
  one or more continuous queries and different types of windows.
 </description>
 <projects>
  <project name='project' pubsub='auto' threads='3'>
   <description>
    This is to create a project. Project specifies a container
    that holds one or more continuous queries and are backed by a
    thread pool of user defined size. One can specify the pubsub
    port and type, number of threads for the project, index type
    and if using Tag Token data flow model.
   </description>
   <contqueries>
    <contquery name='contQuery' trace='aggregateWindow'>
     <description>
      This specifies the continuous query container that holds
      a collection of windows and enables one to specify the
      connectivity between windows. One can turn on tracing
      for a list of window and specifies the index type for
      windows in the query.
     </description>
     <windows>
      <window-source name='sourceWindow' insert-only='true'>
       <description>
        This defines a source window. All event streams must
        enter continuous queries by being published or
        injected into a source window.
       </description>
       <schema>
        <fields>
         <field name='ID' type='int32' key='true'/>
         <field name='symbol' type='string'/>
         <field name='currency' type='int32'/>
         <field name='udate' type='int64'/>
         <field name='msecs' type='int32'/>
         <field name='price' type='double'/>
         <field name='quant' type='int32'/>
         <field name='venue' type='int32'/>
         <field name='broker' type='int32'/>
         <field name='buyer' type='int32'/>
         <field name='seller' type='int32'/>
         <field name='buysellflg' type='int32'/>
        </fields>
       </schema>
       <connectors>
        <connector class='fs' name='pub'>
         <properties>
          <property name='type'>pub</property>
          <property name='fstype'>csv</property>
          <property name='fsname'>@ESPTESTDATA@/aggregate_last_data.csv</property>
          <property name='transactional'>true</property>
          <property name='blocksize'>1</property>
         </properties>
        </connector>
       </connectors>
      </window-source>
      <window-aggregate name='aggregateWindow'>
       <description>
        This is an aggregate window with aggregation expressions.
        Four expressions are: last price, last quant, average price and maximum of quant.
       </description>
       <schema>
        <fields>
         <field name='symbol' type='string' key='true'/>
         <field name='price' type='double'/>
         <field name='quant' type='int32'/>
         <field name='priceAVE' type='double'/>
         <field name='quantMAX' type='int32'/>
        </fields>
       </schema>
       <output>
        <field-expr>ESP_aLast(price)</field-expr>
        <field-expr>ESP_aLast(quant)</field-expr>
        <field-expr>ESP_aAve(price)</field-expr>
        <field-expr>ESP_aMax(quant)</field-expr>
       </output>
       <connectors>
        <connector class='fs' name='sub'>
         <properties>
          <property name='type'>sub</property>
          <property name='fstype'>csv</property>
          <property name='fsname'>aggregate_output.csv</property>
          <property name='collapse'>true</property>
          <property name='snapshot'>true</property>
         </properties>
        </connector>
       </connectors>
      </window-aggregate>
     </windows>
     <edges>
      <description>
       This fully specifies the continuous query with window
       connectivity, which is a directed graph.
      </description>
      <edge source='sourceWindow' target='aggregateWindow'/>
     </edges>
    </contquery>
   </contqueries>
  </project>
 </projects>
</engine>

