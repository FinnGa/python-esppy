<engine port='55555'>
<description>
 This is a simple example of a text context window.  The source
 window input events to the text context window.  A copy window
 is connected to the text context window.
  engine element creates the single engine top level container which sets up dfESP
  fundamental services such as licensing, logging, pub/sub, ...
  This single engine instance wraps one or more projects, that wrap
  one or more continuous queries and different types of windows.
 </description>
 <projects>
  <project name='textcat_xml' pubsub='auto' threads='1'>
   <description>
    This is to create a project. Project specifies a container
    that holds one or more continuous queries and are backed by a
    thread pool of userdefined size. One can specify the pubsub
    port and type, number of threads for the project, index type
    and if using Tag Token data flow model.
   </description>
   <contqueries>
    <contquery name='contquery_01' trace='textContextWindow_01'>
     <description>
      This fully specifies the continuous query with window
      connectivity, which is a directed graph.
     </description>
     <windows>
      <window-source name='sourceWindow_01' index='pi_HASH' collapse-updates='true'>
       <description>
        Build the source window. We specify the window name, the schema
        for events, and the type of primary index, in this case a
        hash tree.
       </description>
       <schema>
        <fields>
         <field name='ID' type='int32' key='true'/>
         <field name='tstamp' type='date'/>
         <field name='msg' type='string'/>
        </fields>
       </schema>
       <connectors>
        <connector name='pub_1' class='fs'>
         <properties>
          <property name='type'>pub</property>
          <property name='fsname'>@EPSTESTDATA@/textcat_data.csv</property>
          <property name='fstype'>csv</property>
          <property name='dateformat'>%Y-%m-%d %H:%M:%S</property>
         </properties>
        </connector>
       </connectors>
      </window-source>
      <window-textcontext name='textContextWindow_01' index='pi_EMPTY' collapse-updates='true' liti-files='en-ne.li;ro-ne.li' text-field='msg'>
       <description>
        Build the textContext window. We specify the window name, the type
        of primary index, the Liti files specification string and the
        input string field to analyze.
        Note that the index for this window is an empty index.  This means
        that events created in this window will not be retained in this
        window.  This is because textContext windows are insert only,
        hence there is no way of deleting these events using retention
        so without using an empty index this window would grow indefinitely.

        If you try to run this example you will need to have licensed SAS
        Text Analytics, whose install contains these Liti language files.

        You will need to change the litFiles string above to point to your
        installation of the Liti files otherwise the text analytics engine
        will not be initialized and classified terms will not be found.
       </description>
       <connectors>
        <connector name='sub_1' class='fs'>
         <properties>
          <property name='type'>sub</property>
          <property name='snapshot'>true</property>
          <property name='fsname'>output.csv</property>
          <property name='fstype'>csv</property>
         </properties>
        </connector>
       </connectors>
      </window-textcontext>
      <window-copy name='copyWindow_01' index='pi_RBTREE' collapse-updates='true'>
       <description>
        This creates a copy window.
        We are placing a copy window after the textContext window so that
        it can be used to hold the textContext events with an established
        retention policy. This is a design pattern for insert-only windows.
        The retention policy is set to a sliding window of 5 minutes(300 seconds).
        This example only has 3 events being injected so the retention
        policy will not take effect, but if we published enough data
        into this model then it would start retaining older events out
        using retention deletes once they aged past 5 minutes.
       </description>
       <retention type='bytime_sliding'>300 seconds</retention>
      </window-copy>
     </windows>
     <edges>
      <edge source='sourceWindow_01' target='textContextWindow_01'/>
      <edge source='textContextWindow_01' target='copyWindow_01'/>
     </edges>
    </contquery>
   </contqueries>
   <project-connectors>
    <connector-groups>
     <connector-group name='CG_sub_1'>
      <connector-entry connector='contquery_01/textContextWindow_01/sub_1' state='running'/>
     </connector-group>
     <connector-group name='CG_pub_1'>
      <connector-entry connector='contquery_01/sourceWindow_01/pub_1' state='finished'/>
     </connector-group>
    </connector-groups>
    <edges>
     <edge source='CG_sub_1' target='CG_pub_1'/>
    </edges>
   </project-connectors>
  </project>
 </projects>
</engine>

