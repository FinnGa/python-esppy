<engine>
 <description>
  This example shows how to use the new ESP text category window.

  Running Instructions:

  dfesp_xml_server -model file://model.xml -exit
 </description>
 <projects>
  <project name='project_01' pubsub='none' threads='4'>
   <description>Define the project, this is a container for one or more continuous queries.</description>
   <contqueries>
    <contquery name='contquery_01' trace='textCategoryWindow'>
     <description>
      Define a continuous query object. This is the first level container for windows. It also
      contains the window to window connectivity information. We want to see
      textCategoryWindow events as they are created by specifying that window in the trace
      attribute.
     </description>
     <windows>
      <window-source name='sourceWindow_01'>
       <description>
        Build the source window. We specify the window name, the schema
        for events, and the type of primary index, in this case a hash tree
       </description>
       <schema-string>ID*:int32,tstamp:date,msg:string</schema-string>
       <connectors>
        <connector class='fs'>
         <properties>
          <property name='type'>pub</property>
          <property name='fstype'>csv</property>
          <property name='fsname'>@ESPTESTDATA@/text_category_data.csv</property>
          <property name='dateformat'>%Y-%m-%d %H:%M:%S</property>
         </properties>
        </connector>
       </connectors>
      </window-source>
      <window-textcategory name='textCategoryWindow' mco-file='IPTC.mco' text-field='msg' index='pi_EMPTY'>
       <description>
        Build the textCategory window. We specify the window name, the type
        of primary index, the MCO file path, and the input string field
        or document to analyze.
        Note that this is an insert-only window, so you most likely want to
        use an empty index for this window and follow it with a copy window
        for defining data retention of the category events.
        If you try to run this example you will need to have licensed SAS
        Text Analytics, whose install contains these MCO language files.
        You will need to change the mco-file string below to point to your
        MCO file otherwise the text analytics category engine
        will not be initialized.
       </description>
      </window-textcategory>
      <window-copy name='copyWindow_01' index='pi_RBTREE'>
       <description>
        We are placing a copy window after the textCategory window so that
        it can be used to hold the textCategory events with an established
        retention policy. This is a design pattern for insert-only windows.

        We set its retention policy to a sliding window of 5 minutes.
        This example only has 3 events being injected so the retention
        policy will not take effect, but if we published enough data
        into this model then it would start retaining older events out
        using retention deletes once they aged past 5 minutes.
       </description>
       <retention type='bytime_sliding'>5 minutes</retention>
      </window-copy>
     </windows>
     <edges>
      <description>
       Add the connectivity information to the continuous query. This
       means sourceWindow_01 ==> textCategoryWindow ==> copyWindow_01
      </description>
      <edge source='sourceWindow_01' target='textCategoryWindow'/>
      <edge source='textCategoryWindow' target='copyWindow_01'/>
     </edges>
    </contquery>
   </contqueries>
  </project>
 </projects>
</engine>

