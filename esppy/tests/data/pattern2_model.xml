<engine>
 <description>
  This is a simple example that has one source window,  one procedural
  window and one pattern window. The pattern window is to find event 1
  followed by event 2 within 30 seconds.


  engine element creates the single engine top level container which sets up dfESP
  fundamental services such as licensing, logging, pub/sub, ...
  This single engine instance wraps one or more projects, that wrap
  one or more continuous queries and different types of windows.
 </description>
 <projects>
  <project name='project_01' pubsub='auto' threads='1'>
   <description>
    This is to create a project. Project specifies a container
    that holds one or more continuous queries and are backed by a
    thread pool of user defined size. One can specify the pubsub
    port and type, number of threads for the project, index type
    and if using Tag Token data flow model.
   </description>
   <contqueries>
    <contquery name='cq_01' trace='pattern_win'>
     <description>
      This specifies the continuous query container that holds
      a collection of windows and enables one to specify the
      connectivity between windows. One can turn on tracing
      for a list of window and specifies the index type for
      windows in the query.

      This fully specifies the continuous query with window
      connectivity, which is a directed graph.
     </description>
     <windows>
      <window-source name='input'>
       <description>
        This defines a source window. All event streams must
        enter continuous queries by being published or
        injected into a source window.
       </description>
       <schema>
        <fields>
         <field name='key' type='string' key='true'/>
         <field name='intdata' type='int32'/>
         <field name='charData' type='string'/>
         <field name='floatData' type='double'/>
         <field name='dateD' type='date'/>
         <field name='stampD' type='stamp'/>
        </fields>
       </schema>
       <connectors>
        <connector class='fs'>
         <properties>
          <property name='type'>pub</property>
          <property name='fstype'>csv</property>
          <property name='fsname'>@ESPTESTDATA@/pattern2_data.csv</property>
          <property name='transactional'>true</property>
          <property name='blocksize'>1</property>
          <property name='dateformat'>%Y-%m-%d %H:%M:%S</property>
         </properties>
        </connector>
       </connectors>
      </window-source>
      <window-procedural name='proc_win'>
       <description>
        This is s procedural window. The
        handler function for the procedural window is defined
        in src/method.cpp.  See details in src/method.cpp.
       </description>
       <schema>
        <fields>
         <field name='key' type='string' key='true'/>
         <field name='intData' type='int32'/>
         <field name='charData' type='string'/>
         <field name='floatData' type='double'/>
         <field name='dateD' type='date'/>
         <field name='stampD' type='stamp'/>
        </fields>
       </schema>
       <cxx-plugin source='input' name='plugin' function='inputMethod'/>
      </window-procedural>
      <window-pattern name='pattern_win'>
       <description>
        This is a pattern window to find pattern event 1 followed by
        event 2 within 30 seconds.  The timefield is obtained from
        the procedural window.

        Pattern of interest: raise an alert when e1 is followed by e2
        within 30 seconds based on the date field "dateD".
       </description>
       <schema>
        <fields>
         <field name='key' type='int64' key='true'/>
         <field name='dateD' type='date'/>
         <field name='stampD' type='stamp'/>
        </fields>
       </schema>
       <patterns>
        <pattern>
         <events>
          <event source='proc_win' name='e1'>intData > 2</event>
          <event source='proc_win' name='e2'>charData == "abc"</event>
         </events>
         <logic>fby{30 seconds}(e1,e2)</logic>
         <output>
          <field-selection name='dateD' node='e1'/>
          <field-selection name='stampD' node='e2'/>
         </output>
         <timefields>
          <timefield field='dateD' source='proc_win'/>
         </timefields>
        </pattern>
       </patterns>
       <connectors>
        <connector class='fs'>
         <properties>
          <property name='type'>sub</property>
          <property name='fstype'>csv</property>
          <property name='fsname'>output.csv</property>
          <property name='snapshot'>true</property>
          <property name='dateformat'>%Y-%m-%d %H:%M:%S</property>
         </properties>
        </connector>
       </connectors>
      </window-pattern>
     </windows>
     <edges>
      <edge source='input' target='proc_win'/>
      <edge source='proc_win' target='pattern_win'/>
     </edges>
    </contquery>
   </contqueries>
  </project>
 </projects>
</engine>

