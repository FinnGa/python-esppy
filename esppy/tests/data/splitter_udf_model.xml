<engine port='9918'>
 <description>
  This is a simple example that has one source window, one compute
  window, and three copy windows. The compute window uses user defined
  function as splitter to decide the slot where the event will go. Different
  slots go to different copy window.


  engine element creates the single engine top level container which sets up
  dfESP fundamental services such as licensing, logging, pub/sub, ..
  This single engine instance wraps one or more projects, that wrap
  one or more continuous queries and different types of windows.
 </description>
 <projects>
  <project name='project' pubsub='auto' threads='1'>
   <description>
    This is to create a project. Project specifies a container
    that holds one or more continuous queries and are backed by a
    thread pool of user defined size. One can specify the pubsub
    port and type, number of threads for the project, index type
    and if using Tag Token data flow model.
   </description>
   <contqueries>
    <contquery name='contQuery' trace='computeWindowSlot_01 computeWindowSlot_02 computeWindowSlot_03'>
     <description>
      This specifies the continuous query container that holds
      a collection of windows and enables one to specify the
      connectivity between windows. One can turn on tracing
      for a list of window and specifies the index type for
      windows in the query.

      This fully specifies the continuous query with window
      connectivity, which is a directed graph.
     </description>
     <windows>
      <window-source name='sourceWindow' index='pi_RBTREE'>
       <description>
        This defines a source window. All event streams must
        enter continuous queries by being published or
        injected into a source window.
       </description>
       <schema>
        <fields>
         <field name='ID' type='int32' key='true'/>
         <field name='symbol' type='string'/>
         <field name='price' type='double'/>
        </fields>
       </schema>
       <connectors>
        <connector class='fs' name='c01'>
         <properties>
          <property name='type'>pub</property>
          <property name='fstype'>csv</property>
          <property name='fsname'>@ESPTESTDATA@/splitter_udf_data.csv</property>
          <property name='blocksize'>1</property>
          <property name='transactional'>true</property>
         </properties>
        </connector>
       </connectors>
      </window-source>
      <window-compute name='computeWindow' collapse-updates='true'>
       <description>
        This is a compute window that uses user defined function
        as splitter. It calculates the slot number which is used
        to  decide the copy windows that events will go to.
       </description>
       <splitter-expr>
        <expr-initialize>
         <udfs>
          <udf name='udf1' type='int32'>
           <![CDATA[private integer p
                        p = parameter(1);
                        return p%2]]>
          </udf>
         </udfs>
        </expr-initialize>
        <expression>udf1(ID)</expression>
       </splitter-expr>
       <expr-initialize>
        <initializer type='int32'>
         <![CDATA[integer counter 
                    counter=0]]>
        </initializer>
       </expr-initialize>
       <schema>
        <fields>
         <field name='ID' type='int32' key='true'/>
         <field name='counter' type='int32'/>
         <field name='symbol' type='string'/>
         <field name='price' type='double'/>
        </fields>
       </schema>
       <output>
        <field-expr>counter=counter+1 return counter</field-expr>
        <field-expr>symbol</field-expr>
        <field-expr>price</field-expr>
       </output>
      </window-compute>
      <window-copy name='computeWindowSlot_01'/>
      <window-copy name='computeWindowSlot_02'/>
      <window-copy name='computeWindowSlot_03'/>
     </windows>
     <edges>
      <edge source='sourceWindow' target='computeWindow'/>
      <edge source='computeWindow' slot='0' target='computeWindowSlot_01'/>
      <edge source='computeWindow' slot='1' target='computeWindowSlot_02'/>
      <edge source='computeWindow' slot='-1' target='computeWindowSlot_03'/>
     </edges>
    </contquery>
   </contqueries>
  </project>
 </projects>
</engine>

